[{"/home/rohit/dev/react-calculator/src/index.js":"1","/home/rohit/dev/react-calculator/src/App.js":"2"},{"size":433,"mtime":1608035902515,"results":"3","hashOfConfig":"4"},{"size":5315,"mtime":1608195365120,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"8"},"5cvfe8",{"filePath":"9","messages":"10","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"11"},"/home/rohit/dev/react-calculator/src/index.js",[],["12","13"],"/home/rohit/dev/react-calculator/src/App.js",["14","15"],"import React from 'react';\nimport './app.css';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      nums: [], //different numbers as element of the array\n      signs: [], //different symbols as element of the array\n      last: 0, //the last number which is still unknown of its length\n      flag: 0, //flag to avoid multiple clicks of number or signs\n      show: '0', //the overall string which is viewed to the user\n    };\n  }\n\n  cal() {\n    let signs = this.state.signs;\n    let nums = this.state.nums;\n    for (let i = 0; i < 4; i++) {\n      for (let j = 0; j < signs.length; j++) {\n        if (signs[j] === '/' && i === 0) {\n          let res = nums[j] / nums[j + 1] || 0;\n          nums.splice(j, 2, res);\n          signs.splice(j, 1);\n        }\n        if (signs[j] === '*' && i === 1) {\n          let res = nums[j] * nums[j + 1] || 0;\n          nums.splice(j, 2, res);\n          signs.splice(j, 1);\n        }\n        if (signs[j] === '+' && i === 2) {\n          let res = nums[j] + nums[j + 1] || 0;\n          nums.splice(j, 2, res);\n          signs.splice(j, 1);\n        }\n        if (signs[j] === '-' && i === 3) {\n          let res = nums[j] - nums[j + 1] || 0;\n          nums.splice(j, 2, res);\n          signs.splice(j, 1);\n        }\n      }\n    }\n    return nums[0];\n  }\n\n  handleButton(char) {\n    if (char === 'C') {\n      this.setState({ last: 0, nums: [], signs: [], flag: 0, show: '0' });\n    } else if (char === '=') {\n      if (this.state.flag === 1) {\n        let nums = this.state.nums;\n        if (this.state.last !== 0) {\n          nums.push(this.state.last);\n        }\n        let res = 0;\n        res = this.cal();\n        this.setState({ nums: [], signs: [], show: res, last: res, flag: 1 });\n      }\n    } else if (\n      char === 1 ||\n      char === 2 ||\n      char === 3 ||\n      char === 4 ||\n      char === 5 ||\n      char === 6 ||\n      char === 7 ||\n      char === 8 ||\n      char === 9 ||\n      char === 0\n    ) {\n      let last = this.state.last * 10 + char;\n      let show = this.state.show;\n      if (this.state.show === '0') {\n        show = new String(char);\n      } else {\n        show += new String(char);\n      }\n      this.setState({ last: last, show: show, flag: 1 });\n    } else {\n      if (this.state.flag === 1) {\n        let newNums = this.state.nums;\n        newNums.push(this.state.last);\n        let newSigns = this.state.signs;\n        newSigns.push(char);\n        let show = this.state.show;\n        show = show + char;\n        this.setState({\n          nums: newNums,\n          signs: newSigns,\n          last: 0,\n          show: show,\n          flag: 0,\n        });\n      }\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"page\">\n        <div className='app'>\n          <h1 className='result'>{this.state.show}</h1>\n          <div className='numbers'>\n            <div className='row'>\n              <button onClick={(e) => this.handleButton(7, e)} className='num'>\n                7\n              </button>\n              <button onClick={(e) => this.handleButton(8, e)} className='num'>\n                8\n              </button>\n              <button onClick={(e) => this.handleButton(9, e)} className='num'>\n                9\n              </button>\n              <button\n                onClick={(e) => this.handleButton('C', e)}\n                className='num'>\n                C\n              </button>\n            </div>\n            <div className='row'>\n              <button onClick={(e) => this.handleButton(4, e)} className='num'>\n                4\n              </button>\n              <button onClick={(e) => this.handleButton(5, e)} className='num'>\n                5\n              </button>\n              <button onClick={(e) => this.handleButton(6, e)} className='num'>\n                6\n              </button>\n              <button\n                onClick={(e) => this.handleButton('/', e)}\n                className='num'>\n                /\n              </button>\n            </div>\n            <div className='row'>\n              <button onClick={(e) => this.handleButton(1, e)} className='num'>\n                1\n              </button>\n              <button onClick={(e) => this.handleButton(2, e)} className='num'>\n                2\n              </button>\n              <button onClick={(e) => this.handleButton(3, e)} className='num'>\n                3\n              </button>\n              <button\n                onClick={(e) => this.handleButton('*', e)}\n                className='num'>\n                *\n              </button>\n            </div>\n            <div className='row'>\n              <button onClick={(e) => this.handleButton(0, e)} className='num'>\n                0\n              </button>\n              <button\n                onClick={(e) => this.handleButton('=', e)}\n                className='num'>\n                =\n              </button>\n              <button\n                onClick={(e) => this.handleButton('+', e)}\n                className='num'>\n                +\n              </button>\n              <button\n                onClick={(e) => this.handleButton('-', e)}\n                className='num'>\n                -\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n",{"ruleId":"16","replacedBy":"17"},{"ruleId":"18","replacedBy":"19"},{"ruleId":"20","severity":1,"message":"21","line":74,"column":16,"nodeType":"22","messageId":"23","endLine":74,"endColumn":32},{"ruleId":"20","severity":1,"message":"21","line":76,"column":17,"nodeType":"22","messageId":"23","endLine":76,"endColumn":33},"no-native-reassign",["24"],"no-negated-in-lhs",["25"],"no-new-wrappers","Do not use String as a constructor.","NewExpression","noConstructor","no-global-assign","no-unsafe-negation"]